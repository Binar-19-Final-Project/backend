// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Role {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("roles")
}

model User {
  id                Int                     @id @default(autoincrement())
  uuid              String                  @default(uuid())
  name              String
  email             String                  @unique
  phone             Int                     @unique
  password          String
  resetToken        String?                 @map("reset_token") @db.Text
  roleId            Int                     @map("role_id")
  verified          Boolean                 @default(false)
  photoProfile      PhotoProfile?
  userWishlist      UserCourseWishlist?
  order             Order[]
  transaction       Transaction[]
  coursePurchased   CoursePurchased?
  learningProgress  CourseLearningProgress?
  courseTestimonial CourseTestimonial[]
  otp               Otp?
  createdAt         DateTime                @default(now()) @map("created_at")
  updatedAt         DateTime                @updatedAt @map("updated_at")

  @@map("users")
}

model CoursePurchased {
  id          Int      @id @default(autoincrement())
  progress    Int
  userId      Int      @unique @map("user_id")
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  course      Course[]
  purchasedAt DateTime @default(now()) @map("purchased_at")

  @@map("course_purchased")
}

model Otp {
  id        Int      @id @default(autoincrement())
  otp       Int      @map("url_photo")
  userId    Int      @unique @map("user_id")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expiredAt DateTime
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("otps")
}

model PhotoProfile {
  id        Int      @id @default(autoincrement())
  urlPhoto  String   @map("url_photo")
  userId    Int      @unique @map("user_id")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("photo_profiles")
}

model CourseCategory {
  id          Int      @id @default(autoincrement())
  name        String
  slug        String   @unique
  course      Course[]
  isPublished Boolean  @default(true) @map("is_published")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  @@map("course_categories")
}

model CourseType {
  id        Int      @id @default(autoincrement())
  name      String
  course    Course[]
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("course_types")
}

model CourseLevel {
  id        Int      @id @default(autoincrement())
  name      String
  course    Course[]
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("course_levels")
}

model CourseInstructor {
  id        Int      @id @default(autoincrement())
  name      String
  course    Course[]
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("course_instructors")
}

model CoursePromo {
  id        Int      @id @default(autoincrement())
  name      String
  discount  Float
  expiredAt DateTime @map("expired_at")
  course    Course[]
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("course_promos")
}

model Course {
  id                Int                  @id @default(autoincrement())
  title             String
  slug              String               @unique
  description       String               @db.Text
  price             Float
  rating            Float
  duration          Int
  imageUrl          String               @map("image_url")
  instructorId      Int                  @map("course_instructor_id")
  instructor        CourseInstructor     @relation(fields: [instructorId], references: [id], onDelete: Cascade)
  courseTypeId      Int                  @map("course_type_id")
  courseType        CourseType           @relation(fields: [courseTypeId], references: [id], onDelete: Cascade)
  courseCategoryId  Int                  @map("course_category_id")
  courseCategory    CourseCategory       @relation(fields: [courseCategoryId], references: [id], onDelete: Cascade)
  courseLevelId     Int                  @map("course_level_id")
  courseLevel       CourseLevel          @relation(fields: [courseLevelId], references: [id], onDelete: Cascade)
  coursePromoId     Int?                 @map("course_promo_id")
  coursePromo       CoursePromo?         @relation(fields: [coursePromoId], references: [id], onDelete: Cascade)
  isPromo           Boolean              @default(false) @map("is_promo")
  isPublished       Boolean              @default(true) @map("is_published")
  courseModule      CourseModule[]
  userWishlist      UserCourseWishlist[]
  order             Order[]
  purchashed        CoursePurchased[]
  courseTestimonial CourseTestimonial[]
  createdAt         DateTime             @default(now()) @map("created_at")
  updatedAt         DateTime             @updatedAt @map("updated_at")

  @@map("courses")
}

model CourseModule {
  id            Int            @id @default(autoincrement())
  title         String
  duration      Int
  totalChapter  Int            @map("total_content")
  courseId      Int            @map("course_id")
  course        Course         @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseContent CourseContent[]
  createdAt     DateTime       @default(now()) @map("created_at")
  updatedAt     DateTime       @updatedAt @map("updated_at")

  @@map("course_modules")
}

model CourseContent {
  id                 Int                      @id @default(autoincrement())
  title              String
  videoUrl           String
  duration           Int
  finished           Boolean                  @default(false)
  isFree             Boolean                  @default(true) @map("is_free")
  moduleId           Int                      @map("course_id")
  courseModule       CourseModule             @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  learningProgresses CourseLearningProgress[]
  createdAt          DateTime                 @default(now()) @map("created_at")
  updatedAt          DateTime                 @updatedAt @map("updated_at")

  @@map("course_contents")
}

model CourseLearningProgress {
  id          Int           @id @default(autoincrement())
  progress    Float         @default(0)
  isCompleted Boolean       @default(false)
  userId      Int           @unique @map("user_id")
  user        User          @relation(fields: [userId], references: [id])
  contentId   Int           @map("course_content_id")
  content     CourseContent @relation(fields: [contentId], references: [id])
  createdAt   DateTime      @default(now()) @map("created_at")
  updatedAt   DateTime      @updatedAt @map("updated_at")

  @@map("course_learning_progress")
}

model CourseTestimonial {
  id          Int      @id @default(autoincrement())
  testimonial String   @db.Text
  rating      Float
  userId      Int      
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  courseId    Int      
  course      Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId])
  @@map("course_testimonials")
}


model UserCourseWishlist {
  id        Int      @id @default(autoincrement())
  userId    Int      @unique @map("user_id")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  courseId  Int      @map("course_id")
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("user_course_wishlist")
}

model Order {
  id          Int          @id @default(autoincrement())
  orderCode   String       @unique @map("order_code")
  price       Float
  status      String
  userId      Int          @map("user_id")
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  courseId    Int          @map("course_id")
  course      Course       @relation(fields: [courseId], references: [id], onDelete: Cascade)
  transaction Transaction?
  createdAt   DateTime     @default(now()) @map("created_at")
  updatedAt   DateTime     @updatedAt @map("updated_at")
}

model Transaction {
  id        Int      @id @default(autoincrement())
  status    String
  orderId   Int      @unique @map("order_id")
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  userId    Int      @map("user_id")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
}
